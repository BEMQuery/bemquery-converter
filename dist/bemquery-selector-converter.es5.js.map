{"version":3,"file":null,"sources":["../src/defaultConfig.js","../src/Converter.js","../src/factory.js","../src/Selector.js"],"sourcesContent":["'use strict';\n\nfunction endsWithModifier( selector, bemConfig ) {\n\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+$`,\n\t\t'g' );\n\n\treturn !!selector.match( regex );\n}\n\nfunction getSelectorWithoutModifier( selector, modifierSeparator ) {\n\treturn ` ${selector.substring( selector.lastIndexOf( '.' ), selector.lastIndexOf( modifierSeparator ) )}`;\n}\n\nconst defaultConfig = {\n\tbem: {\n\t\telemSeparator: '__',\n\t\tmodifierSeparator: '_'\n\t},\n\trules: {\n\t\tdefault( token ) {\n\t\t\treturn `.${token}`;\n\t\t},\n\n\t\t' > '( token, config ) {\n\t\t\treturn ` ${config.rules.default( token )}`;\n\t\t},\n\n\t\t' '( token, config, selector ) {\n\t\t\tif ( endsWithModifier( selector, config.bem ) ) {\n\t\t\t\treturn `${getSelectorWithoutModifier( selector, config.bem.modifierSeparator )}${config.bem.elemSeparator}${token}`;\n\t\t\t}\n\n\t\t\treturn `${config.bem.elemSeparator}${token}`;\n\t\t},\n\n\t\t':'( token, config ) {\n\t\t\treturn `${config.bem.modifierSeparator}${token}`;\n\t\t}\n\t}\n};\n\nexport default defaultConfig;\n","'use strict';\n\nimport Selector from './Selector';\nimport defaultConfig from './defaultConfig';\n\nfunction convertToken( tokens, config, selector = '' ) {\n\tconst rules = config.rules;\n\tconst delimeter = tokens.shift();\n\tlet rule;\n\tlet token;\n\n\tif ( !delimeter ) {\n\t\treturn selector;\n\t} else if ( !selector ) {\n\t\ttoken = delimeter;\n\t\trule = rules.default;\n\t} else {\n\t\ttoken = tokens.shift();\n\t\trule = rules[ delimeter ];\n\t}\n\n\tif ( typeof rule !== 'function' ) {\n\t\tthrow new SyntaxError( 'Malformed BEM rule' );\n\t}\n\n\tselector += rule( token, config, selector );\n\n\treturn convertToken( tokens, config, selector );\n}\n\nfunction convert( selector, config ) {\n\tconst rules = Object.keys( config.rules ).filter( ( rule ) => {\n\t\treturn rule !== 'default';\n\t} );\n\tconst splitRule = new RegExp( `(${rules.join( '|' )})`, 'g' );\n\tconst splittedSelector = selector.split( splitRule );\n\n\tselector = convertToken( splittedSelector, config );\n\n\treturn selector;\n}\n\n/** Converter's class*/\nclass Converter {\n\t/**\n\t * Create converter's instance.\n\t *\n\t * @param {Object} [config=defaultConfig] converter's configuration options.\n\t * @class\n\t */\n\tconstructor( config = defaultConfig ) {\n\t\t/**\n\t\t * Converter's configuration\n\t\t *\n\t\t * @property {Object}\n\t\t */\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Converts given selector to CSS.\n\t *\n\t * @param {String} selector BEM selector to be converted.\n\t * @return {Selector} Converted selector.\n\t */\n\tconvert( selector ) {\n\t\tconst convertedSelector = convert( selector, this.config );\n\n\t\treturn new Selector( selector, convertedSelector );\n\t}\n\n\t/**\n\t * Get state from given `[class]` attribute contents.\n\t *\n\t * @param {String} className HTML `[class]` attribute.\n\t * @return {String|null} Fetched state.\n\t */\n\tgetStateFromClass( className ) {\n\t\tif ( typeof className !== 'string' ) {\n\t\t\tthrow new TypeError( 'Class must be a string.' );\n\t\t}\n\n\t\tconst bemConfig = this.config.bem;\n\t\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}([^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+)$` );\n\t\tconst match = className.match( regex );\n\n\t\treturn match ? match[ 1 ] : null;\n\t}\n}\n\nexport default Converter;\n","'use strict';\n\nimport Converter from './Converter';\nimport defaultConverterConfig from './defaultConfig';\n\n/**\n * BEM selector converter factory.\n *\n * @param {Object} [converterConfig=defaultConverterConfig] Configuration object that\n * should be passed to the Converter constructor.\n * @return {Converter} Converter's instance.\n */\nfunction factory( converterConfig = defaultConverterConfig ) {\n\tconst converter = new Converter( converterConfig );\n\n\treturn converter;\n}\n\nexport default factory;\n","'use strict';\n\n/** Simple class representing selector */\nclass Selector {\n\t/**\n\t * Creates new Selector instance.\n\t *\n\t * @param {String} BEM BEM version of selector.\n\t * @param {String} CSS CSS version of selector.\n\t */\n\tconstructor( BEM, CSS ) {\n\t\t/**\n\t\t * BEM version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.BEM = BEM;\n\n\t\t/**\n\t\t * CSS version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.CSS = CSS;\n\n\t\tObject.freeze( this );\n\t}\n}\n\nexport default Selector;\n"],"names":["endsWithModifier","selector","bemConfig","regex","RegExp","elemSeparator","modifierSeparator","match","getSelectorWithoutModifier","substring","lastIndexOf","convertToken","tokens","config","rules","delimeter","shift","rule","token","default","SyntaxError","convert","Object","keys","filter","splitRule","join","splittedSelector","split","factory","converterConfig","defaultConverterConfig","converter","Converter","Selector","BEM","CSS","freeze","this","defaultConfig","bem","convertedSelector","className","TypeError"],"mappings":"wOAEA,SAASA,GAAkBC,EAAUC,MAC9BC,GAAQ,GAAIC,aAAaF,EAAUG,cAAgBH,EAAUI,uBAAsBJ,EAAUI,uBAAsBJ,EAAUG,cAAgBH,EAAUI,wBAC5J,aAEQL,EAASM,MAAOJ,GAG1B,QAASK,GAA4BP,EAAUK,aACnCL,EAASQ,UAAWR,EAASS,YAAa,KAAOT,EAASS,YAAaJ,ICLnF,QAASK,GAAcC,EAAQC,MAAQZ,8CAAW,gBAC3Ca,EAAQD,EAAOC,MACfC,EAAYH,EAAOI,QACrBC,SACAC,aAEEH,QACEd,MACKA,KAIJW,EAAOI,UACRF,EAAOC,OAJNA,IACDD,EAAMK,SAMO,kBAATF,QACL,IAAIG,aAAa,gCAGZH,EAAMC,EAAOL,EAAQZ,GAE1BU,EAAcC,EAAQC,EAAQZ,GAGtC,QAASoB,GAASpB,EAAUY,MACrBC,GAAQQ,OAAOC,KAAMV,EAAOC,OAAQU,OAAQ,SAAEP,SACnC,YAATA,IAEFQ,EAAY,GAAIrB,YAAYU,EAAMY,KAAM,SAAU,KAClDC,EAAmB1B,EAAS2B,MAAOH,YAE9Bd,EAAcgB,EAAkBd,GCzB5C,QAASgB,QAASC,8CAAkBC,eAC7BC,EAAY,GAAIC,GAAWH,SAE1BE,2VCZFE,EAOL,WAAaC,EAAKC,kBAMZD,IAAMA,OAONC,IAAMA,SAEJC,OAAQC,OHZXC,sBAEW,uBACI,6BAGVrB,aACGA,kBAGLA,EAAOL,aACFA,EAAOC,MAAMK,QAASD,iBAG7BA,EAAOL,EAAQZ,SACdD,GAAkBC,EAAUY,EAAO2B,QAC7BhC,EAA4BP,EAAUY,EAAO2B,IAAIlC,mBAAsBO,EAAO2B,IAAInC,cAAgBa,KAGnGL,EAAO2B,IAAInC,cAAgBa,gBAGjCA,EAAOL,YACDA,EAAO2B,IAAIlC,kBAAoBY,KCOtCe,6BAOQpB,8CAAS0B,8BAMhB1B,OAASA,4CASNZ,MACFwC,GAAoBpB,EAASpB,EAAUqC,KAAKzB,cAE3C,IAAIqB,GAAUjC,EAAUwC,6CASbC,MACQ,gBAAdA,QACL,IAAIC,WAAW,8BAGhBzC,GAAYoC,KAAKzB,OAAO2B,IACxBrC,EAAQ,GAAIC,aAAaF,EAAUG,cAAgBH,EAAUI,uBAAsBJ,EAAUI,wBAAuBJ,EAAUG,cAAgBH,EAAUI,0BACxJC,EAAQmC,EAAUnC,MAAOJ,SAExBI,GAAQA,EAAO,GAAM"}