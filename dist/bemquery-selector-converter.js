/*! bemquery-selector-converter v0.1.5 | (c) 2016-2017 BEMQuery team | MIT license (see LICENSE) */class Selector{constructor(a,b){this.BEM=a,this.CSS=b,Object.freeze(this)}}function endsWithModifier(a,b){const c=new RegExp(`[^${b.elemSeparator}${b.modifierSeparator}]+${b.modifierSeparator}[^${b.elemSeparator}${b.modifierSeparator}]+$`,'g');return!!a.match(c)}function getSelectorWithoutModifier(a,b){return` ${a.substring(a.lastIndexOf('.'),a.lastIndexOf(b))}`}const defaultConfig={bem:{elemSeparator:'__',modifierSeparator:'_'},rules:{default(a){return`.${a}`},' > '(a,b){return` ${b.rules.default(a)}`},' '(a,b,c){return endsWithModifier(c,b.bem)?`${getSelectorWithoutModifier(c,b.bem.modifierSeparator)}${b.bem.elemSeparator}${a}`:`${b.bem.elemSeparator}${a}`},':'(a,b){return`${b.bem.modifierSeparator}${a}`}}};function convertToken(a,b,c=''){const d=b.rules,e=a.shift();let f,g;if(!e)return c;if(c?(g=a.shift(),f=d[e]):(g=e,f=d.default),'function'!=typeof f)throw new SyntaxError('Malformed BEM rule');return c+=f(g,b,c),convertToken(a,b,c)}function convert(a,b){const c=Object.keys(b.rules).filter(f=>{return'default'!==f}),d=new RegExp(`(${c.join('|')})`,'g'),e=a.split(d);return a=convertToken(e,b),a}class Converter{constructor(a=defaultConfig){this.config=a}convert(a){const b=convert(a,this.config);return new Selector(a,b)}getStateFromClass(a){if('string'!=typeof a)throw new TypeError('Class must be a string.');const b=this.config.bem,c=new RegExp(`[^${b.elemSeparator}${b.modifierSeparator}]+${b.modifierSeparator}([^${b.elemSeparator}${b.modifierSeparator}]+)$`),d=a.match(c);return d?d[1]:null}}function factory(a=defaultConfig){const b=new Converter(a);return b}export{Converter,Selector};export default factory;
//# sourceMappingURL=bemquery-selector-converter.js.map
