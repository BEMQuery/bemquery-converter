{"version":3,"file":"bemquery-selector-converter.js","sources":["../src/Selector.js","../src/defaultConfig.js","../src/Converter.js","../src/factory.js"],"sourcesContent":["'use strict';\n\n/** Simple class representing selector */\nclass Selector {\n\t/**\n\t * Creates new Selector instance.\n\t *\n\t * @param {String} BEM BEM version of selector.\n\t * @param {String} CSS CSS version of selector.\n\t */\n\tconstructor( BEM, CSS ) {\n\t\t/**\n\t\t * BEM version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.BEM = BEM;\n\n\t\t/**\n\t\t * CSS version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.CSS = CSS;\n\n\t\tObject.freeze( this );\n\t}\n}\n\nexport default Selector;\n","'use strict';\n\nfunction endsWithModifier( selector, bemConfig ) {\n\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+$`,\n\t\t'g' );\n\n\treturn !!selector.match( regex );\n}\n\nfunction getSelectorWithoutModifier( selector, modifierSeparator ) {\n\treturn ` ${selector.substring( selector.lastIndexOf( '.' ), selector.lastIndexOf( modifierSeparator ) )}`;\n}\n\nconst defaultConfig = {\n\tbem: {\n\t\telemSeparator: '__',\n\t\tmodifierSeparator: '_'\n\t},\n\trules: {\n\t\tdefault( token ) {\n\t\t\treturn `.${token}`;\n\t\t},\n\n\t\t' > '( token, config ) {\n\t\t\treturn ` ${config.rules.default( token )}`;\n\t\t},\n\n\t\t' '( token, config, selector ) {\n\t\t\tif ( endsWithModifier( selector, config.bem ) ) {\n\t\t\t\treturn `${getSelectorWithoutModifier( selector, config.bem.modifierSeparator )}${config.bem.elemSeparator}${token}`;\n\t\t\t}\n\n\t\t\treturn `${config.bem.elemSeparator}${token}`;\n\t\t},\n\n\t\t':'( token, config ) {\n\t\t\treturn `${config.bem.modifierSeparator}${token}`;\n\t\t}\n\t}\n};\n\nexport default defaultConfig;\n","'use strict';\n\nimport Selector from './Selector';\nimport defaultConfig from './defaultConfig';\n\nfunction convertToken( tokens, config, selector = '' ) {\n\tconst rules = config.rules;\n\tconst delimeter = tokens.shift();\n\tlet rule;\n\tlet token;\n\n\tif ( !delimeter ) {\n\t\treturn selector;\n\t} else if ( !selector ) {\n\t\ttoken = delimeter;\n\t\trule = rules.default;\n\t} else {\n\t\ttoken = tokens.shift();\n\t\trule = rules[ delimeter ];\n\t}\n\n\tif ( typeof rule !== 'function' ) {\n\t\tthrow new SyntaxError( 'Malformed BEM rule' );\n\t}\n\n\tselector += rule( token, config, selector );\n\n\treturn convertToken( tokens, config, selector );\n}\n\nfunction convert( selector, config ) {\n\tconst rules = Object.keys( config.rules ).filter( ( rule ) => {\n\t\treturn rule !== 'default';\n\t} );\n\tconst splitRule = new RegExp( `(${rules.join( '|' )})`, 'g' );\n\tconst splittedSelector = selector.split( splitRule );\n\n\tselector = convertToken( splittedSelector, config );\n\n\treturn selector;\n}\n\n/** Converter's class*/\nclass Converter {\n\t/**\n\t * Create converter's instance.\n\t *\n\t * @param {Object} [config=defaultConfig] converter's configuration options.\n\t * @class\n\t */\n\tconstructor( config = defaultConfig ) {\n\t\t/**\n\t\t * Converter's configuration\n\t\t *\n\t\t * @property {Object}\n\t\t */\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Converts given selector to CSS.\n\t *\n\t * @param {String} selector BEM selector to be converted.\n\t * @return {Selector} Converted selector.\n\t */\n\tconvert( selector ) {\n\t\tconst convertedSelector = convert( selector, this.config );\n\n\t\treturn new Selector( selector, convertedSelector );\n\t}\n\n\t/**\n\t * Get state from given `[class]` attribute contents.\n\t *\n\t * @param {String} className HTML `[class]` attribute.\n\t * @return {String|null} Fetched state.\n\t */\n\tgetStateFromClass( className ) {\n\t\tif ( typeof className !== 'string' ) {\n\t\t\tthrow new TypeError( 'Class must be a string.' );\n\t\t}\n\n\t\tconst bemConfig = this.config.bem;\n\t\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}([^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+)$` );\n\t\tconst match = className.match( regex );\n\n\t\treturn match ? match[ 1 ] : null;\n\t}\n}\n\nexport default Converter;\n","'use strict';\n\nimport Converter from './Converter';\nimport defaultConverterConfig from './defaultConfig';\n\n/**\n * BEM selector converter factory.\n *\n * @param {Object} [converterConfig=defaultConverterConfig] Configuration object that\n * should be passed to the Converter constructor.\n * @return {Converter} Converter's instance.\n */\nfunction factory( converterConfig = defaultConverterConfig ) {\n\tconst converter = new Converter( converterConfig );\n\n\treturn converter;\n}\n\nexport default factory;\n"],"names":["Selector","constructor","BEM","CSS","Object","freeze","endsWithModifier","selector","bemConfig","regex","RegExp","elemSeparator","modifierSeparator","match","getSelectorWithoutModifier","substring","lastIndexOf","defaultConfig","bem","rules","default","token","config","convertToken","tokens","delimeter","shift","rule","SyntaxError","convert","keys","filter","splitRule","join","splittedSelector","split","Converter","convertedSelector","getStateFromClass","className","TypeError","factory","converterConfig","defaultConverterConfig","converter"],"mappings":"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"}