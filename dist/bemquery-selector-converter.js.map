{"version":3,"file":null,"sources":["../src/Selector.js","../src/defaultConfig.js","../src/Converter.js","../src/factory.js"],"sourcesContent":["'use strict';\n\n/** Simple class representing selector */\nclass Selector {\n\t/**\n\t * Creates new Selector instance.\n\t *\n\t * @param {String} BEM BEM version of selector.\n\t * @param {String} CSS CSS version of selector.\n\t */\n\tconstructor( BEM, CSS ) {\n\t\t/**\n\t\t * BEM version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.BEM = BEM;\n\n\t\t/**\n\t\t * CSS version of selector.\n\t\t *\n\t\t * @property {String}\n\t\t */\n\t\tthis.CSS = CSS;\n\n\t\tObject.freeze( this );\n\t}\n}\n\nexport default Selector;\n","'use strict';\n\nfunction endsWithModifier( selector, bemConfig ) {\n\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+$`,\n\t\t'g' );\n\n\treturn !!selector.match( regex );\n}\n\nfunction getSelectorWithoutModifier( selector, modifierSeparator ) {\n\treturn ` ${selector.substring( selector.lastIndexOf( '.' ), selector.lastIndexOf( modifierSeparator ) )}`;\n}\n\nconst defaultConfig = {\n\tbem: {\n\t\telemSeparator: '__',\n\t\tmodifierSeparator: '_'\n\t},\n\trules: {\n\t\tdefault( token ) {\n\t\t\treturn `.${token}`;\n\t\t},\n\n\t\t' > '( token, config ) {\n\t\t\treturn ` ${config.rules.default( token )}`;\n\t\t},\n\n\t\t' '( token, config, selector ) {\n\t\t\tif ( endsWithModifier( selector, config.bem ) ) {\n\t\t\t\treturn `${getSelectorWithoutModifier( selector, config.bem.modifierSeparator )}${config.bem.elemSeparator}${token}`;\n\t\t\t}\n\n\t\t\treturn `${config.bem.elemSeparator}${token}`;\n\t\t},\n\n\t\t':'( token, config ) {\n\t\t\treturn `${config.bem.modifierSeparator}${token}`;\n\t\t}\n\t}\n};\n\nexport default defaultConfig;\n","'use strict';\n\nimport Selector from './Selector';\nimport defaultConfig from './defaultConfig';\n\nfunction convertToken( tokens, config, selector = '' ) {\n\tconst rules = config.rules;\n\tconst delimeter = tokens.shift();\n\tlet rule;\n\tlet token;\n\n\tif ( !delimeter ) {\n\t\treturn selector;\n\t} else if ( !selector ) {\n\t\ttoken = delimeter;\n\t\trule = rules.default;\n\t} else {\n\t\ttoken = tokens.shift();\n\t\trule = rules[ delimeter ];\n\t}\n\n\tif ( typeof rule !== 'function' ) {\n\t\tthrow new SyntaxError( 'Malformed BEM rule' );\n\t}\n\n\tselector += rule( token, config, selector );\n\n\treturn convertToken( tokens, config, selector );\n}\n\nfunction convert( selector, config ) {\n\tconst rules = Object.keys( config.rules ).filter( ( rule ) => {\n\t\treturn rule !== 'default';\n\t} );\n\tconst splitRule = new RegExp( `(${rules.join( '|' )})`, 'g' );\n\tconst splittedSelector = selector.split( splitRule );\n\n\tselector = convertToken( splittedSelector, config );\n\n\treturn selector;\n}\n\n/** Converter's class*/\nclass Converter {\n\t/**\n\t * Create converter's instance.\n\t *\n\t * @param {Object} [config=defaultConfig] converter's configuration options.\n\t * @class\n\t */\n\tconstructor( config = defaultConfig ) {\n\t\t/**\n\t\t * Converter's configuration\n\t\t *\n\t\t * @property {Object}\n\t\t */\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Converts given selector to CSS.\n\t *\n\t * @param {String} selector BEM selector to be converted.\n\t * @return {Selector} Converted selector.\n\t */\n\tconvert( selector ) {\n\t\tconst convertedSelector = convert( selector, this.config );\n\n\t\treturn new Selector( selector, convertedSelector );\n\t}\n\n\t/**\n\t * Get state from given `[class]` attribute contents.\n\t *\n\t * @param {String} className HTML `[class]` attribute.\n\t * @return {String|null} Fetched state.\n\t */\n\tgetStateFromClass( className ) {\n\t\tif ( typeof className !== 'string' ) {\n\t\t\tthrow new TypeError( 'Class must be a string.' );\n\t\t}\n\n\t\tconst bemConfig = this.config.bem;\n\t\tconst regex = new RegExp( `[^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+${bemConfig.modifierSeparator}([^${bemConfig.elemSeparator}${bemConfig.modifierSeparator}]+)$` );\n\t\tconst match = className.match( regex );\n\n\t\treturn match ? match[ 1 ] : null;\n\t}\n}\n\nexport default Converter;\n","'use strict';\n\nimport Converter from './Converter';\nimport defaultConverterConfig from './defaultConfig';\n\n/**\n * BEM selector converter factory.\n *\n * @param {Object} [converterConfig=defaultConverterConfig] Configuration object that\n * should be passed to the Converter constructor.\n * @return {Converter} Converter's instance.\n */\nfunction factory( converterConfig = defaultConverterConfig ) {\n\tconst converter = new Converter( converterConfig );\n\n\treturn converter;\n}\n\nexport default factory;\n"],"names":["defaultConverterConfig"],"mappings":"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"}